/*
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Mvc.Testing;

namespace Petstore.Tests
{ 
    using Xunit;
    using GeneratedCode.Models;
    using GeneratedCode.Interfaces;

    /// <summary>
    /// pet API
    /// </summary>
    public class PetTests : IClassFixture<WebApplicationFactory<Startup>>
    {
        private readonly WebApplicationFactory<Startup> _factory;
        public PetTests(WebApplicationFactory<Startup> factory)
        {
            _factory = factory;
        }

        /// <summary>
        /// Add a new pet to the store
        /// </summary>  
        /// <param name="petItem">Pet object that needs to be added to the store</param>
        /// <response code="405">Invalid input</response>
        //public async Task addPetTest(Pet petItem)

        [Theory]
        [InlineData(default(Pet))]
        public async Task addPetTest(Pet petItem)
        { 
            var client = _factory.CreateClient();
            var url = $"/pet";

            // todo:  implement
            // var response = await client.GetAsync(url);
            // response.EnsureSuccessStatusCode();

            throw new NotImplementedException("The test is not yet implemented");
        }

        /// <summary>
        /// Update an existing pet
        /// </summary>  
        /// <param name="petItem">Pet object that needs to be added to the store</param>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Pet not found</response>
        /// <response code="405">Validation exception</response>
        //public async Task updatePetTest(Pet petItem)

        [Theory]
        [InlineData(default(Pet))]
        public async Task updatePetTest(Pet petItem)
        { 
            var client = _factory.CreateClient();
            var url = $"/pet";

            // todo:  implement
            // var response = await client.GetAsync(url);
            // response.EnsureSuccessStatusCode();

            throw new NotImplementedException("The test is not yet implemented");
        }

        /// <summary>
        /// Finds Pets by status
        /// </summary>  
        /// <remarks>Multiple status values can be provided with comma separated strings</remarks>
        /// <param name="status">Status values that need to be considered for filter</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid status value</response>
        //public async Task findPetsByStatusTest(HashSet<PetStatusEnum> status)

        [Theory]
        [InlineData(default(HashSet<PetStatusEnum>))]
        public async Task findPetsByStatusTest(HashSet<PetStatusEnum> status)
        { 
            var client = _factory.CreateClient();
            var url = $"/pet/findByStatus?status={ status }";

            // todo:  implement
            // var response = await client.GetAsync(url);
            // response.EnsureSuccessStatusCode();

            throw new NotImplementedException("The test is not yet implemented");
        }

        /// <summary>
        /// Finds Pets by tags
        /// </summary>  
        /// <remarks>Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.</remarks>
        /// <param name="tags">Tags to filter by</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid tag value</response>
        //public async Task findPetsByTagsTest(List<string> tags)

        [Theory]
        [InlineData(default(List<string>))]
        public async Task findPetsByTagsTest(List<string> tags)
        { 
            var client = _factory.CreateClient();
            var url = $"/pet/findByTags?tags={ tags }";

            // todo:  implement
            // var response = await client.GetAsync(url);
            // response.EnsureSuccessStatusCode();

            throw new NotImplementedException("The test is not yet implemented");
        }

        /// <summary>
        /// Find pet by ID
        /// </summary>  
        /// <remarks>Returns a single pet</remarks>
        /// <param name="petId">ID of pet to return</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Pet not found</response>
        //public async Task getPetByIdTest(int petId)

        [Theory]
        [InlineData(default(int))]
        public async Task getPetByIdTest(int petId)
        { 
            var client = _factory.CreateClient();
            var url = $"/pet/{petId}";

            // todo:  implement
            // var response = await client.GetAsync(url);
            // response.EnsureSuccessStatusCode();

            throw new NotImplementedException("The test is not yet implemented");
        }

        /// <summary>
        /// Updates a pet in the store with form data
        /// </summary>  
        /// <param name="petId">ID of pet that needs to be updated</param>
        /// <param name="name">Updated name of the pet</param>
        /// <param name="status">Updated status of the pet</param>
        /// <response code="405">Invalid input</response>
        //public async Task updatePetWithFormTest(int petId, string name, string status)

        [Theory]
        [InlineData(default(int), default(string), default(string))]
        public async Task updatePetWithFormTest(int petId, string name, string status)
        { 
            var client = _factory.CreateClient();
            var url = $"/pet/{petId}";

            // todo:  implement
            // var response = await client.GetAsync(url);
            // response.EnsureSuccessStatusCode();

            throw new NotImplementedException("The test is not yet implemented");
        }

        /// <summary>
        /// Deletes a pet
        /// </summary>  
        /// <param name="api_key">pet API</param>
        /// <param name="petId">Pet id to delete</param>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Pet not found</response>
        //public async Task deletePetTest(string api_key, int petId)

        [Theory]
        [InlineData(default(string), default(int))]
        public async Task deletePetTest(string api_key, int petId)
        { 
            var client = _factory.CreateClient();
            var url = $"/pet/{petId}";

            // todo:  implement
            // var response = await client.GetAsync(url);
            // response.EnsureSuccessStatusCode();

            throw new NotImplementedException("The test is not yet implemented");
        }

        /// <summary>
        /// uploads an image
        /// </summary>  
        /// <param name="petId">ID of pet to update</param>
        /// <param name="additionalMetadata">Additional data to pass to server</param>
        /// <param name="file">file to upload</param>
        /// <response code="200">successful operation</response>
        //public async Task uploadFileTest(int petId, string additionalMetadata, IFormFile file)

        [Theory]
        [InlineData(default(int), default(string), default(IFormFile))]
        public async Task uploadFileTest(int petId, string additionalMetadata, IFormFile file)
        { 
            var client = _factory.CreateClient();
            var url = $"/pet/{petId}/uploadImage";

            // todo:  implement
            // var response = await client.GetAsync(url);
            // response.EnsureSuccessStatusCode();

            throw new NotImplementedException("The test is not yet implemented");
        }
    }
}
