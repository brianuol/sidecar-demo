/*
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Swashbuckle.AspNetCore.Annotations;

namespace Petstore.GeneratedCode.Controllers
{ 
    using Models;
    using Interfaces;
    using Attributes;

    /// <summary>
    /// user API
    /// </summary>
    [Description("user API")]
    public class UserController : Controller, IUserController
    {
        private readonly IUserController _implementation;
        public UserController(IUserController implementation){
            this._implementation = implementation;
        }
        
        /// <summary>
        /// Create user
        /// </summary>  
        /// <remarks>This can only be done by the logged in user.</remarks>
        /// <param name="userItem">Created user object</param>
        /// <response code="200">successful operation</response>
        [HttpPost]
        [Route("/user")]
        [ValidateModelState]
        [SwaggerOperation("createUser")]
        [SwaggerResponse(statusCode: 200, description: "successful operation")]
        public virtual IActionResult createUser([FromBody]User userItem)
        {
            try {
                return this._implementation.createUser(userItem);
            }
            catch(NotImplementedException){
                return Content("createUser says: finish me!");
            }
        }

        /// <summary>
        /// Creates list of users with given input array
        /// </summary>  
        /// <param name="userItems">List of user object</param>
        /// <response code="200">successful operation</response>
        [HttpPost]
        [Route("/user/createWithArray")]
        [ValidateModelState]
        [SwaggerOperation("createUsersWithArrayInput")]
        [SwaggerResponse(statusCode: 200, description: "successful operation")]
        public virtual IActionResult createUsersWithArrayInput([FromBody]List<User> userItems)
        {
            try {
                return this._implementation.createUsersWithArrayInput(userItems);
            }
            catch(NotImplementedException){
                return Content("createUsersWithArrayInput says: finish me!");
            }
        }

        /// <summary>
        /// Creates list of users with given input array
        /// </summary>  
        /// <param name="userItems">List of user object</param>
        /// <response code="200">successful operation</response>
        [HttpPost]
        [Route("/user/createWithList")]
        [ValidateModelState]
        [SwaggerOperation("createUsersWithListInput")]
        [SwaggerResponse(statusCode: 200, description: "successful operation")]
        public virtual IActionResult createUsersWithListInput([FromBody]List<User> userItems)
        {
            try {
                return this._implementation.createUsersWithListInput(userItems);
            }
            catch(NotImplementedException){
                return Content("createUsersWithListInput says: finish me!");
            }
        }

        /// <summary>
        /// Logs user into the system
        /// </summary>  
        /// <param name="username">The user name for login</param>
        /// <param name="password">The password for login in clear text</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid username/password supplied</response>
        [HttpGet]
        [Route("/user/login")]
        [ValidateModelState]
        [SwaggerOperation("loginUser")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "successful operation")]
        [SwaggerResponse(statusCode: 400, description: "Invalid username/password supplied")]
        public virtual IActionResult loginUser([FromQuery][Required()]string username, [FromQuery][Required()]string password)
        {
            try {
                return this._implementation.loginUser(username, password);
            }
            catch(NotImplementedException){
                return Content("loginUser says: finish me!");
            }
        }

        /// <summary>
        /// Logs out current logged in user session
        /// </summary>  
        /// <response code="200">successful operation</response>
        [HttpGet]
        [Route("/user/logout")]
        [ValidateModelState]
        [SwaggerOperation("logoutUser")]
        [SwaggerResponse(statusCode: 200, description: "successful operation")]
        public virtual IActionResult logoutUser()
        {
            try {
                return this._implementation.logoutUser();
            }
            catch(NotImplementedException){
                return Content("logoutUser says: finish me!");
            }
        }

        /// <summary>
        /// Get user by user name
        /// </summary>  
        /// <param name="username">The name that needs to be fetched. Use user1 for testing. </param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid username supplied</response>
        /// <response code="404">User not found</response>
        [HttpGet]
        [Route("/user/{username}")]
        [ValidateModelState]
        [SwaggerOperation("getUserByName")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "successful operation")]
        [SwaggerResponse(statusCode: 400, description: "Invalid username supplied")]
        [SwaggerResponse(statusCode: 404, description: "User not found")]
        public virtual IActionResult getUserByName([FromRoute][Required]string username)
        {
            try {
                return this._implementation.getUserByName(username);
            }
            catch(NotImplementedException){
                return Content("getUserByName says: finish me!");
            }
        }

        /// <summary>
        /// Updated user
        /// </summary>  
        /// <remarks>This can only be done by the logged in user.</remarks>
        /// <param name="username">name that need to be updated</param>
        /// <param name="userItem">Updated user object</param>
        /// <response code="400">Invalid user supplied</response>
        /// <response code="404">User not found</response>
        [HttpPut]
        [Route("/user/{username}")]
        [ValidateModelState]
        [SwaggerOperation("updateUser")]
        [SwaggerResponse(statusCode: 400, description: "Invalid user supplied")]
        [SwaggerResponse(statusCode: 404, description: "User not found")]
        public virtual IActionResult updateUser([FromRoute][Required]string username, [FromBody]User userItem)
        {
            try {
                return this._implementation.updateUser(username, userItem);
            }
            catch(NotImplementedException){
                return Content("updateUser says: finish me!");
            }
        }

        /// <summary>
        /// Delete user
        /// </summary>  
        /// <remarks>This can only be done by the logged in user.</remarks>
        /// <param name="username">The name that needs to be deleted</param>
        /// <response code="400">Invalid username supplied</response>
        /// <response code="404">User not found</response>
        [HttpDelete]
        [Route("/user/{username}")]
        [ValidateModelState]
        [SwaggerOperation("deleteUser")]
        [SwaggerResponse(statusCode: 400, description: "Invalid username supplied")]
        [SwaggerResponse(statusCode: 404, description: "User not found")]
        public virtual IActionResult deleteUser([FromRoute][Required]string username)
        {
            try {
                return this._implementation.deleteUser(username);
            }
            catch(NotImplementedException){
                return Content("deleteUser says: finish me!");
            }
        }
    }
}
