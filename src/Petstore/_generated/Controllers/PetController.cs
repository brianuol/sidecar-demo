/*
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Swashbuckle.AspNetCore.Annotations;

namespace Petstore.GeneratedCode.Controllers
{ 
    using Models;
    using Interfaces;
    using Attributes;

    /// <summary>
    /// pet API
    /// </summary>
    [Description("pet API")]
    public class PetController : Controller, IPetController
    {
        private readonly IPetController _implementation;
        public PetController(IPetController implementation){
            this._implementation = implementation;
        }
        
        /// <summary>
        /// Add a new pet to the store
        /// </summary>  
        /// <param name="petItem">Pet object that needs to be added to the store</param>
        /// <response code="405">Invalid input</response>
        [HttpPost]
        [Route("/pet")]
        [ValidateModelState]
        [SwaggerOperation("addPet")]
        [SwaggerResponse(statusCode: 405, description: "Invalid input")]
        public virtual IActionResult addPet([FromBody]Pet petItem)
        {
            try {
                return this._implementation.addPet(petItem);
            }
            catch(NotImplementedException){
                return Content("addPet says: finish me!");
            }
        }

        /// <summary>
        /// Update an existing pet
        /// </summary>  
        /// <param name="petItem">Pet object that needs to be added to the store</param>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Pet not found</response>
        /// <response code="405">Validation exception</response>
        [HttpPut]
        [Route("/pet")]
        [ValidateModelState]
        [SwaggerOperation("updatePet")]
        [SwaggerResponse(statusCode: 400, description: "Invalid ID supplied")]
        [SwaggerResponse(statusCode: 404, description: "Pet not found")]
        [SwaggerResponse(statusCode: 405, description: "Validation exception")]
        public virtual IActionResult updatePet([FromBody]Pet petItem)
        {
            try {
                return this._implementation.updatePet(petItem);
            }
            catch(NotImplementedException){
                return Content("updatePet says: finish me!");
            }
        }

        /// <summary>
        /// Finds Pets by status
        /// </summary>  
        /// <remarks>Multiple status values can be provided with comma separated strings</remarks>
        /// <param name="status">Status values that need to be considered for filter</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid status value</response>
        [HttpGet]
        [Route("/pet/findByStatus")]
        [ValidateModelState]
        [SwaggerOperation("findPetsByStatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Pet>), description: "successful operation")]
        [SwaggerResponse(statusCode: 400, description: "Invalid status value")]
        public virtual IActionResult findPetsByStatus([FromQuery][Required()]HashSet<PetStatusEnum> status)
        {
            try {
                return this._implementation.findPetsByStatus(status);
            }
            catch(NotImplementedException){
                return Content("findPetsByStatus says: finish me!");
            }
        }

        /// <summary>
        /// Finds Pets by tags
        /// </summary>  
        /// <remarks>Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.</remarks>
        /// <param name="tags">Tags to filter by</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid tag value</response>
        [HttpGet]
        [Route("/pet/findByTags")]
        [ValidateModelState]
        [SwaggerOperation("findPetsByTags")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Pet>), description: "successful operation")]
        [SwaggerResponse(statusCode: 400, description: "Invalid tag value")]
        public virtual IActionResult findPetsByTags([FromQuery][Required()]List<string> tags)
        {
            try {
                return this._implementation.findPetsByTags(tags);
            }
            catch(NotImplementedException){
                return Content("findPetsByTags says: finish me!");
            }
        }

        /// <summary>
        /// Find pet by ID
        /// </summary>  
        /// <remarks>Returns a single pet</remarks>
        /// <param name="petId">ID of pet to return</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Pet not found</response>
        [HttpGet]
        [Route("/pet/{petId}")]
        [ValidateModelState]
        [SwaggerOperation("getPetById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Pet), description: "successful operation")]
        [SwaggerResponse(statusCode: 400, description: "Invalid ID supplied")]
        [SwaggerResponse(statusCode: 404, description: "Pet not found")]
        public virtual IActionResult getPetById([FromRoute][Required]int petId)
        {
            try {
                return this._implementation.getPetById(petId);
            }
            catch(NotImplementedException){
                return Content("getPetById says: finish me!");
            }
        }

        /// <summary>
        /// Updates a pet in the store with form data
        /// </summary>  
        /// <param name="petId">ID of pet that needs to be updated</param>
        /// <param name="name">Updated name of the pet</param>
        /// <param name="status">Updated status of the pet</param>
        /// <response code="405">Invalid input</response>
        [HttpPost]
        [Route("/pet/{petId}")]
        [ValidateModelState]
        [SwaggerOperation("updatePetWithForm")]
        [SwaggerResponse(statusCode: 405, description: "Invalid input")]
        public virtual IActionResult updatePetWithForm([FromRoute][Required]int petId, [FromForm]string name, [FromForm]string status)
        {
            try {
                return this._implementation.updatePetWithForm(petId, name, status);
            }
            catch(NotImplementedException){
                return Content("updatePetWithForm says: finish me!");
            }
        }

        /// <summary>
        /// Deletes a pet
        /// </summary>  
        /// <param name="api_key">pet API</param>
        /// <param name="petId">Pet id to delete</param>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Pet not found</response>
        [HttpDelete]
        [Route("/pet/{petId}")]
        [ValidateModelState]
        [SwaggerOperation("deletePet")]
        [SwaggerResponse(statusCode: 400, description: "Invalid ID supplied")]
        [SwaggerResponse(statusCode: 404, description: "Pet not found")]
        public virtual IActionResult deletePet([FromHeader]string api_key, [FromRoute][Required]int petId)
        {
            try {
                return this._implementation.deletePet(api_key, petId);
            }
            catch(NotImplementedException){
                return Content("deletePet says: finish me!");
            }
        }

        /// <summary>
        /// uploads an image
        /// </summary>  
        /// <param name="petId">ID of pet to update</param>
        /// <param name="additionalMetadata">Additional data to pass to server</param>
        /// <param name="file">file to upload</param>
        /// <response code="200">successful operation</response>
        [HttpPost]
        [Route("/pet/{petId}/uploadImage")]
        [ValidateModelState]
        [SwaggerOperation("uploadFile")]
        [SwaggerResponse(statusCode: 200, type: typeof(ApiResponse), description: "successful operation")]
        public virtual IActionResult uploadFile([FromRoute][Required]int petId, [FromForm]string additionalMetadata, [FromForm]IFormFile file)
        {
            try {
                return this._implementation.uploadFile(petId, additionalMetadata, file);
            }
            catch(NotImplementedException){
                return Content("uploadFile says: finish me!");
            }
        }
    }
}
