/*
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;

namespace Petstore.GeneratedCode.Interfaces
{ 
    using Models;

    /// <summary>
    /// user API
    /// </summary>
    [Description("user API")]
    public interface IUserController
    { 
        /// <summary>
        /// Create user
        /// </summary>
        /// <remarks>This can only be done by the logged in user.</remarks>
        /// <param name="userItem">Created user object</param>
        /// <response code="200">successful operation</response>
        IActionResult createUser(User userItem);
        
        /// <summary>
        /// Creates list of users with given input array
        /// </summary>
        /// <param name="userItems">List of user object</param>
        /// <response code="200">successful operation</response>
        IActionResult createUsersWithArrayInput(List<User> userItems);
        
        /// <summary>
        /// Creates list of users with given input array
        /// </summary>
        /// <param name="userItems">List of user object</param>
        /// <response code="200">successful operation</response>
        IActionResult createUsersWithListInput(List<User> userItems);
        
        /// <summary>
        /// Logs user into the system
        /// </summary>
        /// <param name="username">The user name for login</param>
        /// <param name="password">The password for login in clear text</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid username/password supplied</response>
        IActionResult loginUser(string username, string password);
        
        /// <summary>
        /// Logs out current logged in user session
        /// </summary>
        /// <response code="200">successful operation</response>
        IActionResult logoutUser();
        
        /// <summary>
        /// Get user by user name
        /// </summary>
        /// <param name="username">The name that needs to be fetched. Use user1 for testing. </param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid username supplied</response>
        /// <response code="404">User not found</response>
        IActionResult getUserByName(string username);
        
        /// <summary>
        /// Updated user
        /// </summary>
        /// <remarks>This can only be done by the logged in user.</remarks>
        /// <param name="username">name that need to be updated</param>
        /// <param name="userItem">Updated user object</param>
        /// <response code="400">Invalid user supplied</response>
        /// <response code="404">User not found</response>
        IActionResult updateUser(string username, User userItem);
        
        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>This can only be done by the logged in user.</remarks>
        /// <param name="username">The name that needs to be deleted</param>
        /// <response code="400">Invalid username supplied</response>
        /// <response code="404">User not found</response>
        IActionResult deleteUser(string username);    }
}
