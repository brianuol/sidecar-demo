/*
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Petstore.GeneratedCode.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Pet : IEquatable<Pet>
    { 
        /// <summary>
        /// Gets or Sets id
        /// </summary>
        [DataMember(Name="id")]
        public int id { get; set; }

        /// <summary>
        /// Gets or Sets category
        /// </summary>
        [DataMember(Name="category")]
        public Category category { get; set; }

        /// <summary>
        /// Gets or Sets name
        /// </summary>
        [Required]
        [DataMember(Name="name")]
        public string name { get; set; }

        /// <summary>
        /// Gets or Sets photoUrls
        /// </summary>
        [Required]
        [DataMember(Name="photoUrls")]
        public List<string> photoUrls { get; set; }

        /// <summary>
        /// Gets or Sets tags
        /// </summary>
        [DataMember(Name="tags")]
        public List<Tag> tags { get; set; }

        /// <summary>
        /// pet status in the store
        /// </summary>
        /// <value>pet status in the store</value>
        [DataMember(Name="status")]
        public PetStatusEnum? status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Pet {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  category: ").Append(category).Append("\n");
            sb.Append("  name: ").Append(name).Append("\n");
            sb.Append("  photoUrls: ").Append(photoUrls).Append("\n");
            sb.Append("  tags: ").Append(tags).Append("\n");
            sb.Append("  status: ").Append(status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Pet)obj);
        }

        /// <summary>
        /// Returns true if Pet instances are equal
        /// </summary>
        /// <param name="other">Instance of Pet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Pet other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    id == other.id || null != other &&
                    id.Equals(other.id) == true
                ) && 
                (
                    category == other.category || null != other &&
                    category.Equals(other.category) == true
                ) && 
                (
                    name == other.name || null != other &&
                    name.Equals(other.name) == true
                ) && 
                (
                    photoUrls == other.photoUrls || null != other &&
                    photoUrls.SequenceEqual(other.photoUrls) == true
                ) && 
                (
                    tags == other.tags || null != other &&
                    tags.SequenceEqual(other.tags) == true
                ) && 
                (
                    status == other.status || null != other &&
                    status.Equals(other.status) == true
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + id.GetHashCode();
                    if (category != null)
                    hashCode = hashCode * 59 + category.GetHashCode();
                    
                    hashCode = hashCode * 59 + name.GetHashCode();
                    
                    hashCode = hashCode * 59 + photoUrls.GetHashCode();
                    if (tags != null)
                    hashCode = hashCode * 59 + tags.GetHashCode();
                    if (status != null)
                    hashCode = hashCode * 59 + status.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Pet left, Pet right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Pet left, Pet right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
