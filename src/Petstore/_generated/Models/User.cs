/*
 * 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Petstore.GeneratedCode.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class User : IEquatable<User>
    { 
        /// <summary>
        /// Gets or Sets id
        /// </summary>
        [DataMember(Name="id")]
        public int id { get; set; }

        /// <summary>
        /// Gets or Sets username
        /// </summary>
        [DataMember(Name="username")]
        public string username { get; set; }

        /// <summary>
        /// Gets or Sets firstName
        /// </summary>
        [DataMember(Name="firstName")]
        public string firstName { get; set; }

        /// <summary>
        /// Gets or Sets lastName
        /// </summary>
        [DataMember(Name="lastName")]
        public string lastName { get; set; }

        /// <summary>
        /// Gets or Sets email
        /// </summary>
        [DataMember(Name="email")]
        public string email { get; set; }

        /// <summary>
        /// Gets or Sets password
        /// </summary>
        [DataMember(Name="password")]
        public string password { get; set; }

        /// <summary>
        /// Gets or Sets phone
        /// </summary>
        [DataMember(Name="phone")]
        public string phone { get; set; }

        /// <summary>
        /// User Status
        /// </summary>
        /// <value>User Status</value>
        [DataMember(Name="userStatus")]
        public int userStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  id: ").Append(id).Append("\n");
            sb.Append("  username: ").Append(username).Append("\n");
            sb.Append("  firstName: ").Append(firstName).Append("\n");
            sb.Append("  lastName: ").Append(lastName).Append("\n");
            sb.Append("  email: ").Append(email).Append("\n");
            sb.Append("  password: ").Append(password).Append("\n");
            sb.Append("  phone: ").Append(phone).Append("\n");
            sb.Append("  userStatus: ").Append(userStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((User)obj);
        }

        /// <summary>
        /// Returns true if User instances are equal
        /// </summary>
        /// <param name="other">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    id == other.id || null != other &&
                    id.Equals(other.id) == true
                ) && 
                (
                    username == other.username || null != other &&
                    username.Equals(other.username) == true
                ) && 
                (
                    firstName == other.firstName || null != other &&
                    firstName.Equals(other.firstName) == true
                ) && 
                (
                    lastName == other.lastName || null != other &&
                    lastName.Equals(other.lastName) == true
                ) && 
                (
                    email == other.email || null != other &&
                    email.Equals(other.email) == true
                ) && 
                (
                    password == other.password || null != other &&
                    password.Equals(other.password) == true
                ) && 
                (
                    phone == other.phone || null != other &&
                    phone.Equals(other.phone) == true
                ) && 
                (
                    userStatus == other.userStatus || null != other &&
                    userStatus.Equals(other.userStatus) == true
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + id.GetHashCode();
                    
                    hashCode = hashCode * 59 + username.GetHashCode();
                    
                    hashCode = hashCode * 59 + firstName.GetHashCode();
                    
                    hashCode = hashCode * 59 + lastName.GetHashCode();
                    
                    hashCode = hashCode * 59 + email.GetHashCode();
                    
                    hashCode = hashCode * 59 + password.GetHashCode();
                    
                    hashCode = hashCode * 59 + phone.GetHashCode();
                    
                    hashCode = hashCode * 59 + userStatus.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(User left, User right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(User left, User right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
